#lang racket

; Мы указали, что множество представляется как список без повторяющихся элементов. 
; Допустим теперь, что мы разрешаем повторяющиеся элементы. Например, множество {1, 2, 3} 
; могло бы быть представлено как список (2 3 2 1 3 2 2). 
; Разработайте процедуры element-of-set?, adjoin-set, union-set и intersection-set,
; которые бы работали с таким представлением.
; Как соотносится эффективность этих операций с эффективностью соответствующих процедур для
; представления без повторений? 
; Существуют ли приложения, в которых Вы бы использовали скорее это представление, 
; чем представление без повторений?


(define (adjoin-set x set)
  (cons x set))

(define (union-set set1 set2)
  (append set1 set2))

(define (intersection-set set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((element-of-set? (car set1) set2)
         (cons (car set1)
               (intersection-set (cdr set1) set2)))
        (else (intersection-set (cdr set1) set2))))

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))


; Эффективность операции добавления элемента увеличится, операции объединения увеличится, 
; так как не выполняется поддержка уникальности элементов множества.
; Эффективность операций пересечения и проверки вхождения при малой степени дублирования не изменится.
; Если в списках большая степень дублирования элементов, операции могут выполняться как эффективнее так и медленнее 
; в зависимости от конкретных данных.
; Данную реализацияю операций имеет смысль использовать если число выполнения добавления элементов и объеденения
; превалирует над числом операций пересечения и проверки вхождения элемента во множество.

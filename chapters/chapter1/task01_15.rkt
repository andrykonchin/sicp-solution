#lang racket


; Синус угла (заданного в радианах) можно вычислить, если воспользоваться приближением sin x ≈ x 
; при малых x и употребить тригонометрическое тождество
;               x          x
; sin x = 3 sin - − 4 (sin - )^3
;               3          3
;              
; для уменьшения значения аргумента sin. (В этом упражнении мы будем считать, что угол «достаточно мал», 
; если он не больше 0.1 радиана.) Эта идея используется в следующих процедурах:
;
; (define (cube x) (* x x x))
; (define (p x) (- (* 3 x) (* 4 (cube x))))
; (define (sine angle)
;   (if (not (> (abs angle) 0.1))
;       angle
;       (p (sine (/ angle 3.0)))))
;
; а. Сколько раз вызывается процедура p при вычислении (sine 12.15)?
; б. Каковы порядки роста в терминах количества шагов и используемой памяти (как функция a)
; для процесса, порождаемого процедурой sine при вычислении (sine a)?

; a.
; Очевидно, что число вызовов K функции p равно числу шагов, нужное для уменьшения x до 0.1.
; Пусть начальное значение x = n, тогда
;   x
;  --- = 0.1 
;  3^K
;
;  K = log3(x/0.1), где log3 - логорифм по основанию 3. Приведем логорифм к основанию 10
; 
;      log(x/0.1)
; K = ------------
;        log 3
; 
; Так как K должно быть наименьшим целым числом при котором аргумент становится меньше 0.1, мы должны округлить результат в большую сторону.
; Для n = 12.15 K = 4.369... Округляя получаем 5 шагов. Т.е. функция p будет вычисляться 5 раз

; б.
; Число шагов и используемая память имеют порядок роста Θ(log a)